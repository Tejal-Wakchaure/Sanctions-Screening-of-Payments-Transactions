package com.example.citiproject.contoller;

import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.example.citiproject.entities.Transaction;
import com.example.citiproject.service.TransactionService;
import com.example.citiproject.service.TransactionServiceImpl;

@RestController
@CrossOrigin
public class Mycontroller {
	static Logger logger = LoggerFactory.getLogger(TransactionServiceImpl.class);
    private final TransactionServiceImpl transactionServiceImpl;	
	String fileName;

	public Mycontroller(TransactionServiceImpl transactionServiceImpl) {
		this.transactionServiceImpl= transactionServiceImpl;
	}
	@Autowired
	private TransactionService transactionService;
	List<Transaction> validPass = new ArrayList<>();

	@GetMapping("/home")
	public String sayhi() {
		return this.transactionService.sayhi();
	}

	@GetMapping("/getAllTransactions")
	public List<Transaction> getAllTransactions() {
		return transactionService.getAllTransactions(fileName);
	}
	
	@GetMapping("/getDatabase")
	public List<Transaction> getDatabase() {
		return transactionService.getDatabase();
	}

	@PostMapping("/uploadfile")
	public ResponseEntity<?> addTransaction(@RequestParam("file") MultipartFile file) throws IOException {

		boolean format = transactionService.checkFormat(file);
		boolean col = transactionService.isAllColumnPresent(file.getInputStream());
		if (format == false) {
			logger.error("File type must be Excel(.xls)!");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("File type must be Excel(.xls)!");
		} else if (col == false) {
			logger.error("All columns are not present in excel .xls file!");
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("File must contain seven column!");
		} else {
			fileName = file.getOriginalFilename();
			this.transactionService.addTransaction(file.getInputStream(), fileName);
			return ResponseEntity.ok(Map.of("message", "File Accepted. Transactions added successfully!"));
		}
	}

	@GetMapping("/sanctionScreening")
	public String sanctionScreening() {
		return transactionService.sanctionScreening();
	}
	
	@GetMapping("/logs")
    public ResponseEntity<List<String>> getLogs() {
		 List<String> logs = transactionService.retrieveAndFormatLogs();
	        logger.info("Logs retrieved through API");
	        return ResponseEntity.ok(logs);
	    }

}
